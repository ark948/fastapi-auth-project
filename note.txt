- added templates (in pages app)
- added static (for pages app to serve html)

- required for testing:
> pip install httpx

- adding database (will be used for auth app) (will be updated from sqlalchemy to sqlmodel)
- requires python-dotenv, sqlalchemy, sqlmodel

-> for input (request) and output (response) control --> use schema
-> for creation, deletion, update (crud) actions --> use model

OAuth2 uses form data to send username and password (uses python-multipart)

- adding actual authentication
- fastapi doc is just filled with fake dummy examples and everything in one file
- first, we need to implement password hashing (we will use passlib)
> pip install "passlib[bcrypt]" (bcrypt is the recommended hashing algorithm)
- create a passlib context (this is what will be used to hash and verify passwords)
- python-jose package may also be required
- also pyjwt
- tokens are not kept in database, they only will be verified upon each request


- first password hashing (done)
- then login process (done)
- protecting routes 
- getting current user

remaining: 
a more complete user model with profile
account verification
account recovery (email and password)

database migration with alembic (done):
> pip install alembic
> alembic init alembic
> add import SQLModel to alembic/env.py file
> import models in alembic/env.py file
> update the sqlalchemy.url in alembic.ini file
- run:
> alembic revision --autogenerate -m "init"
> alembic upgrade head
> ensure it works
(in SQLModel <type> | None is equal to Optional)
first_name: str | None = None # first_name is str and can be None, default also none
> make small change (added first_name and last_name)
- create new migration
> alembic revision --autogenerate -m "add name"
> alembic upgrade head
- ensure it works (do not forget to update the schema)


# tokenUrl will be the URL that frontend will send username and password...
# to get a token


# get_current_usre -> get_user -> user_crud
# login_for_access -> authenticate_user


(NOTE: DO NOT RETURN HTTPException, RAISE it)

session must come from request (pass along)


- account verification process (done, but not very elegant - also requires expiration date and console email backend):
- added a vcode field to User model
> alembic revision --autogenerate -m "user_vcode"
> alembic upgrade head
- Upon creation of a new user, vcode will be randomly generated and assigned
- code must be email to user
- using simple post route, vcode will be submitted
- if vcode is correct, user 'is_active' field will be set to true
- if process was successful, vcode will be changed to None


problme in testing: all examples and online tutorials are using sqlalchemy and not sqlmodel (on temporary pause)
pytest fixtures: functions that will run before each test, they have different scopes (function, class, module, session scope)
The fixture scope defines how long a fixture will be available during the test session.
a conftest can be used to share fixtures
fixtures can be called by other fixtures as well, this is called dependency injection (not recommended)


adding registration form (may not work):
- pip install wtforms
- added forms.py to users app
- register.html